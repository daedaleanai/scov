<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>GCovHTML &gt; binc.cpp</title>
<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/pure-min.css" integrity="sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w" crossorigin="anonymous">
<!--[if lte IE 8]>
	<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/grids-responsive-old-ie-min.css">
<![endif]-->
<!--[if gt IE 8]><!-->
	<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/grids-responsive-min.css">
<!--<![endif]-->
<style>
html { padding:1em; }
body { max-width:70em; margin:auto; }
.coverage { margin-left:auto;margin-right:0; }
.coverage td:nth-child(2) { text-align:center; }
.coverage td:nth-child(3) { text-align:center; }
.coverage td:nth-child(4) { text-align:center; }
.sparkbar { border: 1px solid black; border-radius:1px; min-width:50px; }
.sparkbar .fill { display: inline-block; height: 1em; }
.sparkbar .high { background-color:lightgreen; }
.sparkbar .medium { background-color:yellow; }
.sparkbar .low { background-color:red; }
.sparkbar .empty { display: inline-block; height: 1em; background-color: white; }
.source { font-family: monospace; width:100%; margin:3em 0; }
.source th { padding: .1em .5em; text-align:left; border-bottom: 1px solid black; }
.source td { padding: .1em .5em; white-space: pre; }
.source .hit { background:lightblue; }
.source .miss { background:LightCoral; }
.source td:nth-child(1), .source th:nth-child(1) { background:PaleGoldenrod; text-align:right; }
.source td:nth-child(2), .source th:nth-child(2) { background:#f6f3d4; text-align:right; }
</style>
</head>
<body>
<div class="pure-g"><h1 class="pure-u">GCovHTML &gt; binc.cpp</h1></div>
<div class="pure-g"><div class="pure-u">
<h2>Overall</h2>
<table class="pure-table pure-table-bordered coverage">
<thead><tr><th></th><th>Hit</th><th>Total</th><th>Coverage</th><tr></thead>
<tbody>
<tr><td>Lines:</td><td>90</td><td>151</td><td>59.6%</td></tr>
<tr><td>Functions:</td><td>12</td><td>12</td><td>100.0%</td></tr>
</tbody>
</table>
</div></div>
<div class="pure-g"><div class="pure-u">
<table class="source"><thead>
<tr><th>Line #</th><th>Hit count</th><th>Source code</th></tr>
</thead><tbody>
<tr><td>1</td><td></td><td>#include &lt;algorithm&gt;</td></tr>
<tr><td>2</td><td></td><td>#include &lt;cassert&gt;</td></tr>
<tr><td>3</td><td></td><td>#include &lt;cstdio&gt;</td></tr>
<tr><td>4</td><td></td><td>#include &lt;string&gt;</td></tr>
<tr><td>5</td><td></td><td></td></tr>
<tr><td>6</td><td></td><td>#include &lt;llvm/IR/LLVMContext.h&gt;</td></tr>
<tr><td>7</td><td></td><td>#include &lt;llvm/IR/Module.h&gt;</td></tr>
<tr><td>8</td><td></td><td>#include &lt;llvm/MC/SubtargetFeature.h&gt;</td></tr>
<tr><td>9</td><td></td><td>#include &lt;llvm/Support/CommandLine.h&gt;</td></tr>
<tr><td>10</td><td></td><td>#include &lt;llvm/Support/FileSystem.h&gt;</td></tr>
<tr><td>11</td><td></td><td>#if LLVM_CONFIG &gt;= 700</td></tr>
<tr><td>12</td><td></td><td>#include &lt;llvm/Support/InitLLVM.h&gt;</td></tr>
<tr><td>13</td><td></td><td>#endif</td></tr>
<tr><td>14</td><td></td><td>#include &lt;llvm/Support/Path.h&gt;</td></tr>
<tr><td>15</td><td></td><td>#include &lt;llvm/Support/TargetRegistry.h&gt;</td></tr>
<tr><td>16</td><td></td><td>#include &lt;llvm/Support/TargetSelect.h&gt;</td></tr>
<tr><td>17</td><td></td><td>#include &lt;llvm/Target/TargetMachine.h&gt;</td></tr>
<tr><td>18</td><td></td><td></td></tr>
<tr><td>19</td><td></td><td>#include &#34;binc.h&#34;</td></tr>
<tr><td>20</td><td></td><td></td></tr>
<tr><td>21</td><td></td><td>namespace cl = llvm::cl;</td></tr>
<tr><td>22</td><td></td><td></td></tr>
<tr><td>23</td><td></td><td>using std::string;</td></tr>
<tr><td>24</td><td></td><td></td></tr>
<tr><td>25</td><td></td><td>enum CodeGenFileType {</td></tr>
<tr><td>26</td><td></td><td>	CGFT_AssemblyFile = llvm::TargetMachine::CGFT_AssemblyFile,</td></tr>
<tr><td>27</td><td></td><td>	CGFT_ObjectFile = llvm::TargetMachine::CGFT_ObjectFile,</td></tr>
<tr><td>28</td><td></td><td>	CGFT_Null = llvm::TargetMachine::CGFT_Null,</td></tr>
<tr><td>29</td><td></td><td>	CGFT_IR</td></tr>
<tr><td>30</td><td></td><td>};</td></tr>
<tr><td>31</td><td></td><td></td></tr>
<tr class="hit"><td>32</td><td>18</td><td>cl::OptionCategory category( &#34;binc&#34; );</td></tr>
<tr class="hit"><td>33</td><td>24</td><td>cl::opt&lt;string&gt; OutputFilename( &#34;o&#34;, cl::desc( &#34;Specify the output filename.  If -, use stdout.&#34; ),</td></tr>
<tr class="hit"><td>34</td><td>24</td><td>								cl::value_desc( &#34;filename&#34; ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>35</td><td>24</td><td>cl::opt&lt;string&gt; InputFilename( &#34;c&#34;, cl::desc( &#34;Specify the input filename.  If -, use stdin.&#34; ),</td></tr>
<tr class="hit"><td>36</td><td>24</td><td>							   cl::value_desc( &#34;filename&#34; ), cl::Required, cl::init( &#34;-&#34; ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>37</td><td>36</td><td>cl::opt&lt;string&gt; VariableName( &#34;n&#34;, cl::desc( &#34;Specify linkage name for binary asset.&#34; ), cl::value_desc( &#34;identifier&#34; ),</td></tr>
<tr class="hit"><td>38</td><td>24</td><td>							  cl::cat( category ) );</td></tr>
<tr class="hit"><td>39</td><td>12</td><td>cl::opt&lt;bool&gt; NullTerminate( &#34;z&#34;, cl::desc( &#34;Add a null terminator to the binary asset.&#34; ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>40</td><td>12</td><td>cl::opt&lt;bool&gt; DebugInfo( &#34;g&#34;, cl::desc( &#34;Turn on debugging information&#34; ), cl::init( false ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>41</td><td>24</td><td>cl::opt&lt;std::string&gt; MArch( &#34;march&#34;, cl::desc( &#34;Architecture to generate code for (see --version)&#34; ),</td></tr>
<tr class="hit"><td>42</td><td>18</td><td>							cl::cat( category ) );</td></tr>
<tr class="hit"><td>43</td><td>30</td><td>cl::opt&lt;bool&gt; DataSections( &#34;data-sections&#34;, cl::desc( &#34;Emit data into separate sections&#34; ), cl::init( false ),</td></tr>
<tr class="hit"><td>44</td><td>24</td><td>							cl::cat( category ) );</td></tr>
<tr class="hit"><td>45</td><td>24</td><td>cl::opt&lt;std::string&gt; MCPU( &#34;mcpu&#34;, cl::desc( &#34;Target a specific cpu type (-mcpu=help for details)&#34; ),</td></tr>
<tr class="hit"><td>46</td><td>24</td><td>						   cl::value_desc( &#34;cpu-name&#34; ), cl::init( &#34;&#34; ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>47</td><td>6</td><td>cl::list&lt;std::string&gt; MAttrs( &#34;mattr&#34;, cl::CommaSeparated,</td></tr>
<tr class="hit"><td>48</td><td>18</td><td>							  cl::desc( &#34;Target specific attributes (-mattr=help for details)&#34; ),</td></tr>
<tr class="hit"><td>49</td><td>24</td><td>							  cl::value_desc( &#34;a1,+a2,-a3,...&#34; ), cl::cat( category ) );</td></tr>
<tr class="hit"><td>50</td><td>12</td><td>cl::opt&lt;std::string&gt; TargetTriple( &#34;mtriple&#34;, cl::desc( &#34;Override target triple for module&#34; ), cl::cat( category ) );</td></tr>
<tr><td>51</td><td></td><td>cl::opt&lt;llvm::CodeModel::Model&gt;</td></tr>
<tr class="hit"><td>52</td><td>24</td><td>	CMModel( &#34;code-model&#34;, cl::desc( &#34;Choose code model&#34; ),</td></tr>
<tr class="hit"><td>53</td><td>36</td><td>			 cl::values( clEnumValN( llvm::CodeModel::Small, &#34;small&#34;, &#34;Small code model&#34; ),</td></tr>
<tr><td>54</td><td></td><td>						 clEnumValN( llvm::CodeModel::Kernel, &#34;kernel&#34;, &#34;Kernel code model&#34; ),</td></tr>
<tr><td>55</td><td></td><td>						 clEnumValN( llvm::CodeModel::Medium, &#34;medium&#34;, &#34;Medium code model&#34; ),</td></tr>
<tr><td>56</td><td></td><td>						 clEnumValN( llvm::CodeModel::Large, &#34;large&#34;, &#34;Large code model&#34; ) ),</td></tr>
<tr class="hit"><td>57</td><td>24</td><td>			 cl::cat( category ) );</td></tr>
<tr class="hit"><td>58</td><td>6</td><td>cl::opt&lt;llvm::Reloc::Model&gt; RelocModel(</td></tr>
<tr class="hit"><td>59</td><td>18</td><td>	&#34;relocation-model&#34;, cl::desc( &#34;Choose relocation model&#34; ),</td></tr>
<tr class="hit"><td>60</td><td>48</td><td>	cl::values( clEnumValN( llvm::Reloc::Static, &#34;static&#34;, &#34;Non-relocatable code&#34; ),</td></tr>
<tr><td>61</td><td></td><td>				clEnumValN( llvm::Reloc::PIC_, &#34;pic&#34;, &#34;Fully relocatable, position independent code&#34; ),</td></tr>
<tr><td>62</td><td></td><td>				clEnumValN( llvm::Reloc::DynamicNoPIC, &#34;dynamic-no-pic&#34;,</td></tr>
<tr><td>63</td><td></td><td>							&#34;Relocatable external references, non-relocatable code&#34; ),</td></tr>
<tr><td>64</td><td></td><td>				clEnumValN( llvm::Reloc::ROPI, &#34;ropi&#34;, &#34;Code and read-only data relocatable, accessed PC-relative&#34; ),</td></tr>
<tr><td>65</td><td></td><td>				clEnumValN( llvm::Reloc::RWPI, &#34;rwpi&#34;,</td></tr>
<tr><td>66</td><td></td><td>							&#34;Read-write data relocatable, accessed relative to static base&#34; ),</td></tr>
<tr><td>67</td><td></td><td>				clEnumValN( llvm::Reloc::ROPI_RWPI, &#34;ropi-rwpi&#34;, &#34;Combination of ropi and rwpi&#34; ) ),</td></tr>
<tr class="hit"><td>68</td><td>24</td><td>	cl::cat( category ) );</td></tr>
<tr class="hit"><td>69</td><td>6</td><td>cl::opt&lt;CodeGenFileType&gt; FileType( &#34;filetype&#34;,</td></tr>
<tr class="hit"><td>70</td><td>18</td><td>								   cl::desc( &#34;Choose a file type (not all types are supported by all targets):&#34; ),</td></tr>
<tr class="hit"><td>71</td><td>12</td><td>								   cl::init( CGFT_ObjectFile ),</td></tr>
<tr class="hit"><td>72</td><td>36</td><td>								   cl::values( clEnumValN( CGFT_AssemblyFile, &#34;asm&#34;, &#34;Emit an assembly (&#39;.s&#39;) file&#34; ),</td></tr>
<tr><td>73</td><td></td><td>											   clEnumValN( CGFT_ObjectFile, &#34;obj&#34;, &#34;Emit a native object (&#39;.o&#39;) file&#34; ),</td></tr>
<tr><td>74</td><td></td><td>											   clEnumValN( CGFT_Null, &#34;null&#34;, &#34;Emit nothing, for performance testing&#34; ),</td></tr>
<tr><td>75</td><td></td><td>											   clEnumValN( CGFT_IR, &#34;ir&#34;, &#34;Emit LLVM IR (&#39;.ll&#39;) file&#34; ) ),</td></tr>
<tr class="hit"><td>76</td><td>30</td><td>								   cl::cat( category ) );</td></tr>
<tr><td>77</td><td></td><td></td></tr>
<tr class="hit"><td>78</td><td>6</td><td>static llvm::TargetOptions InitTargetOptionsFromCodeGenFlags() {</td></tr>
<tr class="hit"><td>79</td><td>6</td><td>	llvm::TargetOptions Options;</td></tr>
<tr><td>80</td><td></td><td></td></tr>
<tr class="hit"><td>81</td><td>6</td><td>	Options.DataSections = DataSections;</td></tr>
<tr><td>82</td><td></td><td></td></tr>
<tr><td>83</td><td></td><td>	// Options.MCOptions = InitMCTargetOptionsFromFlags();</td></tr>
<tr><td>84</td><td></td><td></td></tr>
<tr class="hit"><td>85</td><td>6</td><td>	return Options;</td></tr>
<tr><td>86</td><td></td><td>}</td></tr>
<tr><td>87</td><td></td><td></td></tr>
<tr class="hit"><td>88</td><td>6</td><td>static llvm::StringRef getOutputFilename( char const* targetName, llvm::Triple const&amp; triple ) {</td></tr>
<tr class="hit"><td>89</td><td>6</td><td>	if ( !OutputFilename.empty() ) {</td></tr>
<tr class="hit"><td>90</td><td>12</td><td>		return OutputFilename;</td></tr>
<tr><td>91</td><td></td><td>	}</td></tr>
<tr><td>92</td><td></td><td></td></tr>
<tr class="miss"><td>93</td><td>0</td><td>	if ( InputFilename == &#34;-&#34; ) {</td></tr>
<tr class="miss"><td>94</td><td>0</td><td>		OutputFilename = &#34;-&#34;;</td></tr>
<tr class="miss"><td>95</td><td>0</td><td>		return OutputFilename;</td></tr>
<tr><td>96</td><td></td><td>	}</td></tr>
<tr><td>97</td><td></td><td></td></tr>
<tr class="miss"><td>98</td><td>0</td><td>	OutputFilename = llvm::StringRef( InputFilename );</td></tr>
<tr class="miss"><td>99</td><td>0</td><td>	switch ( FileType ) {</td></tr>
<tr class="miss"><td>100</td><td>0</td><td>	default:</td></tr>
<tr><td>101</td><td></td><td>	case CGFT_AssemblyFile:</td></tr>
<tr class="miss"><td>102</td><td>0</td><td>		assert( targetName );</td></tr>
<tr class="miss"><td>103</td><td>0</td><td>		if ( targetName[0] == &#39;c&#39; ) {</td></tr>
<tr class="miss"><td>104</td><td>0</td><td>			if ( targetName[1] == 0 ) {</td></tr>
<tr class="miss"><td>105</td><td>0</td><td>				OutputFilename += &#34;.cbe.c&#34;;</td></tr>
<tr class="miss"><td>106</td><td>0</td><td>			} else if ( targetName[1] == &#39;p&#39; &amp;&amp; targetName[2] == &#39;p&#39; ) {</td></tr>
<tr class="miss"><td>107</td><td>0</td><td>				OutputFilename += &#34;.cpp&#34;;</td></tr>
<tr><td>108</td><td></td><td>			} else {</td></tr>
<tr class="miss"><td>109</td><td>0</td><td>				OutputFilename += &#34;.s&#34;;</td></tr>
<tr><td>110</td><td></td><td>			}</td></tr>
<tr><td>111</td><td></td><td>		} else {</td></tr>
<tr class="miss"><td>112</td><td>0</td><td>			OutputFilename += &#34;.s&#34;;</td></tr>
<tr><td>113</td><td></td><td>		}</td></tr>
<tr class="miss"><td>114</td><td>0</td><td>		break;</td></tr>
<tr><td>115</td><td></td><td></td></tr>
<tr class="miss"><td>116</td><td>0</td><td>	case CGFT_ObjectFile:</td></tr>
<tr class="miss"><td>117</td><td>0</td><td>		if ( triple.getOS() == llvm::Triple::Win32 ) {</td></tr>
<tr class="miss"><td>118</td><td>0</td><td>			OutputFilename += &#34;.obj&#34;;</td></tr>
<tr><td>119</td><td></td><td>		} else {</td></tr>
<tr class="miss"><td>120</td><td>0</td><td>			OutputFilename += &#34;.o&#34;;</td></tr>
<tr><td>121</td><td></td><td>		}</td></tr>
<tr class="miss"><td>122</td><td>0</td><td>		break;</td></tr>
<tr><td>123</td><td></td><td></td></tr>
<tr class="miss"><td>124</td><td>0</td><td>	case CGFT_Null:</td></tr>
<tr class="miss"><td>125</td><td>0</td><td>		OutputFilename += &#34;.null&#34;;</td></tr>
<tr class="miss"><td>126</td><td>0</td><td>		break;</td></tr>
<tr><td>127</td><td></td><td></td></tr>
<tr class="miss"><td>128</td><td>0</td><td>	case CGFT_IR:</td></tr>
<tr class="miss"><td>129</td><td>0</td><td>		OutputFilename += &#34;.ll&#34;;</td></tr>
<tr class="miss"><td>130</td><td>0</td><td>		break;</td></tr>
<tr><td>131</td><td></td><td>	}</td></tr>
<tr class="miss"><td>132</td><td>0</td><td>	return OutputFilename;</td></tr>
<tr><td>133</td><td></td><td>}</td></tr>
<tr><td>134</td><td></td><td></td></tr>
<tr class="hit"><td>135</td><td>6</td><td>static llvm::StringRef getVariableName() {</td></tr>
<tr class="hit"><td>136</td><td>6</td><td>	if ( !VariableName.empty() ) {</td></tr>
<tr class="hit"><td>137</td><td>12</td><td>		return VariableName;</td></tr>
<tr><td>138</td><td></td><td>	}</td></tr>
<tr><td>139</td><td></td><td></td></tr>
<tr class="miss"><td>140</td><td>0</td><td>	if ( InputFilename == &#34;-&#34; ) {</td></tr>
<tr class="miss"><td>141</td><td>0</td><td>		fprintf( stderr, &#34;warn: variable name not specified, and could not be guessed\n&#34; );</td></tr>
<tr class="miss"><td>142</td><td>0</td><td>		return &#34;stdin&#34;;</td></tr>
<tr><td>143</td><td></td><td>	}</td></tr>
<tr><td>144</td><td></td><td></td></tr>
<tr class="miss"><td>145</td><td>0</td><td>	VariableName = llvm::sys::path::filename( InputFilename );</td></tr>
<tr class="miss"><td>146</td><td>0</td><td>	std::replace( VariableName.begin(), VariableName.end(), &#39;.&#39;, &#39;_&#39; );</td></tr>
<tr class="miss"><td>147</td><td>0</td><td>	return VariableName;</td></tr>
<tr><td>148</td><td></td><td>}</td></tr>
<tr><td>149</td><td></td><td></td></tr>
<tr class="hit"><td>150</td><td>6</td><td>static std::string getTargetTriple() {</td></tr>
<tr class="hit"><td>151</td><td>6</td><td>	if ( !TargetTriple.empty() ) {</td></tr>
<tr class="miss"><td>152</td><td>0</td><td>		return llvm::Triple::normalize( TargetTriple );</td></tr>
<tr><td>153</td><td></td><td>	}</td></tr>
<tr><td>154</td><td></td><td></td></tr>
<tr class="hit"><td>155</td><td>6</td><td>	return llvm::sys::getDefaultTargetTriple();</td></tr>
<tr><td>156</td><td></td><td>}</td></tr>
<tr><td>157</td><td></td><td></td></tr>
<tr class="hit"><td>158</td><td>6</td><td>static llvm::StringRef getCPUStr() {</td></tr>
<tr><td>159</td><td></td><td>	// If user asked for the &#39;native&#39; CPU, autodetect here. If autodection fails,</td></tr>
<tr><td>160</td><td></td><td>	// this will set the CPU to an empty string which tells the target to</td></tr>
<tr><td>161</td><td></td><td>	// pick a basic default.</td></tr>
<tr class="hit"><td>162</td><td>6</td><td>	if ( MCPU == &#34;native&#34; ) {</td></tr>
<tr class="miss"><td>163</td><td>0</td><td>		return llvm::sys::getHostCPUName();</td></tr>
<tr><td>164</td><td></td><td>	}</td></tr>
<tr><td>165</td><td></td><td></td></tr>
<tr class="hit"><td>166</td><td>12</td><td>	return MCPU.getValue();</td></tr>
<tr><td>167</td><td></td><td>}</td></tr>
<tr><td>168</td><td></td><td></td></tr>
<tr class="hit"><td>169</td><td>6</td><td>static std::string getFeaturesStr() {</td></tr>
<tr class="hit"><td>170</td><td>18</td><td>	llvm::SubtargetFeatures Features;</td></tr>
<tr><td>171</td><td></td><td></td></tr>
<tr><td>172</td><td></td><td>	// If user asked for the &#39;native&#39; CPU, we need to autodetect features.</td></tr>
<tr><td>173</td><td></td><td>	// This is necessary for x86 where the CPU might not support all the</td></tr>
<tr><td>174</td><td></td><td>	// features the autodetected CPU name lists in the target. For example,</td></tr>
<tr><td>175</td><td></td><td>	// not all Sandybridge processors support AVX.</td></tr>
<tr class="hit"><td>176</td><td>6</td><td>	if ( MCPU == &#34;native&#34; ) {</td></tr>
<tr class="miss"><td>177</td><td>0</td><td>		llvm::StringMap&lt;bool&gt; HostFeatures;</td></tr>
<tr class="miss"><td>178</td><td>0</td><td>		if ( llvm::sys::getHostCPUFeatures( HostFeatures ) ) {</td></tr>
<tr class="miss"><td>179</td><td>0</td><td>			for ( auto&amp; F : HostFeatures ) {</td></tr>
<tr class="miss"><td>180</td><td>0</td><td>				Features.AddFeature( F.first(), F.second );</td></tr>
<tr><td>181</td><td></td><td>			}</td></tr>
<tr><td>182</td><td></td><td>		}</td></tr>
<tr><td>183</td><td></td><td>	}</td></tr>
<tr><td>184</td><td></td><td></td></tr>
<tr class="hit"><td>185</td><td>6</td><td>	for ( unsigned i = 0; i != MAttrs.size(); ++i ) {</td></tr>
<tr class="miss"><td>186</td><td>0</td><td>		Features.AddFeature( MAttrs[i] );</td></tr>
<tr><td>187</td><td></td><td>	}</td></tr>
<tr><td>188</td><td></td><td></td></tr>
<tr class="hit"><td>189</td><td>12</td><td>	return Features.getString();</td></tr>
<tr><td>190</td><td></td><td>}</td></tr>
<tr><td>191</td><td></td><td></td></tr>
<tr><td>192</td><td></td><td>#if LLVM_VERSION &gt;= 600</td></tr>
<tr class="hit"><td>193</td><td>6</td><td>static llvm::Optional&lt;llvm::CodeModel::Model&gt; getCodeModel() {</td></tr>
<tr class="hit"><td>194</td><td>6</td><td>	if ( CMModel.getNumOccurrences() ) {</td></tr>
<tr class="miss"><td>195</td><td>0</td><td>		llvm::CodeModel::Model M = CMModel;</td></tr>
<tr class="miss"><td>196</td><td>0</td><td>		return M;</td></tr>
<tr><td>197</td><td></td><td>	}</td></tr>
<tr class="hit"><td>198</td><td>6</td><td>	return llvm::None;</td></tr>
<tr><td>199</td><td></td><td>}</td></tr>
<tr><td>200</td><td></td><td>#else</td></tr>
<tr><td>201</td><td></td><td>static llvm::CodeModel::Model getCodeModel() {</td></tr>
<tr><td>202</td><td></td><td>	if ( CMModel.getNumOccurrences() ) {</td></tr>
<tr><td>203</td><td></td><td>		return CMModel;</td></tr>
<tr><td>204</td><td></td><td>	}</td></tr>
<tr><td>205</td><td></td><td>	return llvm::CodeModel::Default;</td></tr>
<tr><td>206</td><td></td><td>}</td></tr>
<tr><td>207</td><td></td><td>#endif</td></tr>
<tr><td>208</td><td></td><td></td></tr>
<tr class="hit"><td>209</td><td>6</td><td>static llvm::Optional&lt;llvm::Reloc::Model&gt; getRelocModel() {</td></tr>
<tr class="hit"><td>210</td><td>6</td><td>	if ( RelocModel.getNumOccurrences() ) {</td></tr>
<tr class="miss"><td>211</td><td>0</td><td>		llvm::Reloc::Model R = RelocModel;</td></tr>
<tr class="miss"><td>212</td><td>0</td><td>		return R;</td></tr>
<tr><td>213</td><td></td><td>	}</td></tr>
<tr class="hit"><td>214</td><td>6</td><td>	return llvm::None;</td></tr>
<tr><td>215</td><td></td><td>}</td></tr>
<tr><td>216</td><td></td><td></td></tr>
<tr class="hit"><td>217</td><td>6</td><td>static llvm::TargetMachine::CodeGenFileType asTargetMachineCodeGenFileType( CodeGenFileType filetype ) {</td></tr>
<tr class="hit"><td>218</td><td>6</td><td>	assert( filetype != CGFT_IR );</td></tr>
<tr class="hit"><td>219</td><td>6</td><td>	return static_cast&lt;llvm::TargetMachine::CodeGenFileType&gt;( filetype );</td></tr>
<tr><td>220</td><td></td><td>}</td></tr>
<tr><td>221</td><td></td><td></td></tr>
<tr class="hit"><td>222</td><td>6</td><td>int main( int argc, char const* argv[] ) {</td></tr>
<tr><td>223</td><td></td><td>// Initialize LLVM.</td></tr>
<tr><td>224</td><td></td><td>#if LLVM_CONFIG &gt;= 700</td></tr>
<tr><td>225</td><td></td><td>	llvm::InitLLVM X( argc, argv );</td></tr>
<tr><td>226</td><td></td><td>#endif</td></tr>
<tr><td>227</td><td></td><td></td></tr>
<tr><td>228</td><td></td><td>	// Initialize targets first, so that --version shows registered targets.</td></tr>
<tr class="hit"><td>229</td><td>6</td><td>	llvm::InitializeAllTargets();</td></tr>
<tr class="hit"><td>230</td><td>6</td><td>	llvm::InitializeAllTargetMCs();</td></tr>
<tr class="hit"><td>231</td><td>6</td><td>	llvm::InitializeAllAsmPrinters();</td></tr>
<tr class="hit"><td>232</td><td>6</td><td>	llvm::InitializeAllAsmParsers();</td></tr>
<tr><td>233</td><td></td><td></td></tr>
<tr><td>234</td><td></td><td>	// Process the command line.</td></tr>
<tr class="hit"><td>235</td><td>6</td><td>	cl::HideUnrelatedOptions( category );</td></tr>
<tr class="hit"><td>236</td><td>12</td><td>	if ( !cl::ParseCommandLineOptions( argc, argv ) ) {</td></tr>
<tr class="miss"><td>237</td><td>0</td><td>		return EXIT_FAILURE;</td></tr>
<tr><td>238</td><td></td><td>	}</td></tr>
<tr><td>239</td><td></td><td></td></tr>
<tr><td>240</td><td></td><td>	// Initalize the module.</td></tr>
<tr class="hit"><td>241</td><td>12</td><td>	llvm::LLVMContext context;</td></tr>
<tr class="hit"><td>242</td><td>18</td><td>	llvm::Module module( &#34;binc&#34;, context );</td></tr>
<tr class="hit"><td>243</td><td>12</td><td>	module.setSourceFileName( InputFilename );</td></tr>
<tr class="hit"><td>244</td><td>12</td><td>	module.setTargetTriple( getTargetTriple() );</td></tr>
<tr class="hit"><td>245</td><td>6</td><td>	auto const bufferSize = buildModule( module, getVariableName(), NullTerminate );</td></tr>
<tr class="hit"><td>246</td><td>6</td><td>	assert( !module.global_empty() );</td></tr>
<tr><td>247</td><td></td><td></td></tr>
<tr><td>248</td><td></td><td>	// Initialize debug information</td></tr>
<tr class="hit"><td>249</td><td>6</td><td>	if ( DebugInfo ) {</td></tr>
<tr class="miss"><td>250</td><td>0</td><td>		buildDebugInfo( module, bufferSize );</td></tr>
<tr><td>251</td><td></td><td>	}</td></tr>
<tr><td>252</td><td></td><td></td></tr>
<tr class="hit"><td>253</td><td>6</td><td>	if ( FileType == CGFT_IR ) {</td></tr>
<tr class="miss"><td>254</td><td>0</td><td>		std::error_code ec;</td></tr>
<tr class="miss"><td>255</td><td>0</td><td>		auto triple = llvm::Triple( module.getTargetTriple() );</td></tr>
<tr class="miss"><td>256</td><td>0</td><td>		auto filename = getOutputFilename( &#34;&#34;, triple );</td></tr>
<tr class="miss"><td>257</td><td>0</td><td>		llvm::raw_fd_ostream out( filename, ec, llvm::sys::fs::OpenFlags::F_None );</td></tr>
<tr class="miss"><td>258</td><td>0</td><td>		if ( ec ) {</td></tr>
<tr class="miss"><td>259</td><td>0</td><td>			fprintf( stderr, &#34;error: could not open output: %s\n&#34;, ec.message().c_str() );</td></tr>
<tr class="miss"><td>260</td><td>0</td><td>			return EXIT_FAILURE;</td></tr>
<tr><td>261</td><td></td><td>		}</td></tr>
<tr class="miss"><td>262</td><td>0</td><td>		module.print( out, nullptr );</td></tr>
<tr class="miss"><td>263</td><td>0</td><td>		return EXIT_SUCCESS;</td></tr>
<tr><td>264</td><td></td><td>	}</td></tr>
<tr><td>265</td><td></td><td></td></tr>
<tr class="hit"><td>266</td><td>12</td><td>	std::string errMessage;</td></tr>
<tr class="hit"><td>267</td><td>12</td><td>	auto triple = llvm::Triple( module.getTargetTriple() );</td></tr>
<tr class="hit"><td>268</td><td>6</td><td>	auto const* target = llvm::TargetRegistry::lookupTarget( MArch, triple, errMessage );</td></tr>
<tr class="hit"><td>269</td><td>6</td><td>	if ( !target ) {</td></tr>
<tr class="miss"><td>270</td><td>0</td><td>		fprintf( stderr, &#34;error: could initialize the target: %s\n&#34;, errMessage.c_str() );</td></tr>
<tr class="miss"><td>271</td><td>0</td><td>		return EXIT_FAILURE;</td></tr>
<tr><td>272</td><td></td><td>	}</td></tr>
<tr><td>273</td><td></td><td></td></tr>
<tr class="hit"><td>274</td><td>12</td><td>	auto options = InitTargetOptionsFromCodeGenFlags();</td></tr>
<tr class="hit"><td>275</td><td>6</td><td>	std::unique_ptr&lt;llvm::TargetMachine&gt; targetMachine(</td></tr>
<tr class="hit"><td>276</td><td>18</td><td>		target-&gt;createTargetMachine( triple.getTriple(), getCPUStr(), getFeaturesStr(), options, getRelocModel(),</td></tr>
<tr class="hit"><td>277</td><td>36</td><td>									 getCodeModel(), llvm::CodeGenOpt::None ) );</td></tr>
<tr class="hit"><td>278</td><td>6</td><td>	if ( !targetMachine ) {</td></tr>
<tr class="miss"><td>279</td><td>0</td><td>		fprintf( stderr, &#34;error: could not allocate target machine\n&#34; );</td></tr>
<tr class="miss"><td>280</td><td>0</td><td>		return EXIT_FAILURE;</td></tr>
<tr><td>281</td><td></td><td>	}</td></tr>
<tr><td>282</td><td></td><td></td></tr>
<tr class="hit"><td>283</td><td>6</td><td>	auto ec = writeOutputFile( module, getOutputFilename( target-&gt;getName(), triple ),</td></tr>
<tr class="hit"><td>284</td><td>6</td><td>							   asTargetMachineCodeGenFileType( FileType ), *targetMachine );</td></tr>
<tr class="hit"><td>285</td><td>6</td><td>	if ( ec ) {</td></tr>
<tr class="miss"><td>286</td><td>0</td><td>		fprintf( stderr, &#34;error: could open output: %s\n&#34;, ec.message().c_str() );</td></tr>
<tr class="miss"><td>287</td><td>0</td><td>		return EXIT_FAILURE;</td></tr>
<tr><td>288</td><td></td><td>	}</td></tr>
<tr><td>289</td><td></td><td></td></tr>
<tr class="hit"><td>290</td><td>6</td><td>	return EXIT_SUCCESS;</td></tr>
<tr class="hit"><td>291</td><td>18</td><td>}</td></tr>
</tbody></table>
</div></div>
</body></html>