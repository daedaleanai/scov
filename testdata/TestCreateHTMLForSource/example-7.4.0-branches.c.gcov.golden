<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>SCov &gt; example.c</title>
<meta name="description" content="Code coverage report">
<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/pure-min.css" integrity="sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14RDjBj46LmSztkmNP9w" crossorigin="anonymous">
<!--[if lte IE 8]>
	<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/grids-responsive-old-ie-min.css">
<![endif]-->
<!--[if gt IE 8]><!-->
	<link rel="stylesheet" href="https://unpkg.com/purecss@1.0.0/build/grids-responsive-min.css">
<!--<![endif]-->
<link rel="generator" href="https://gitlab.com/stone.code/scov">
<style>
html { padding:1em; }
body { max-width:70em; margin:auto; }
table { margin-bottom: 1em; }
.coverage { min-width:100%; }
.coverage td:nth-child(2), .coverage th:nth-child(2) { text-align:center; }
.coverage td:nth-child(3), .coverage th:nth-child(3) { text-align:center; }
.coverage td:nth-child(4), .coverage th:nth-child(4) { text-align:center; }
.sparkbar { border: 1px solid black; border-radius:1px; min-width:50px; height:1em; }
.sparkbar .fill { display: inline-block; height: 100%; }
.sparkbar .high { background-color:lightgreen; }
.sparkbar .medium { background-color:yellow; }
.sparkbar .low { background-color:red; }
.sparkbar .empty { display: inline-block; height: 1em; background-color: white; }
.source { font-family: monospace; width:100%; margin:0; }
.source th { padding: .1em .5em; text-align:left; border-bottom: 1px solid black; }
.source td { padding: .1em .5em; white-space: pre; }
.source .hit { background:lightblue; }
.source .miss { background:LightCoral; }
.source td:nth-child(1), .source th:nth-child(1) { background:PaleGoldenrod; text-align:right; }
.source td:nth-child(2), .source th:nth-child(2) { background:#f2edbf; text-align:right; }
.source td:nth-child(3), .source th:nth-child(3) { background:#f6f3d4; text-align:right; }
footer { border-top: 1px solid rgb(203, 203, 203); margin-top: 1em; background: #e0e0e0; padding: .5em 1em; }
@media screen and (min-width: 48em) {
	.pure-gutter-md > div { box-sizing: border-box; padding: 0 0.5em; }
	.pure-gutter-md > div:first-child { padding-left: 0; }
	.pure-gutter-md > div:last-child { padding-right: 0; }
}
@media screen and (max-width: 48em) {
	.table-md td, .table-md th { padding: 0.5em; }
}
</style>
</head>
<body>
<div class="pure-g"><h1 class="pure-u">SCov &gt; example.c</h1></div>
<div class="pure-g pure-gutter-md"><div class="pure-u-1 pure-u-md-1-2">
<h2>Metadata</h2>
<table class="pure-table pure-table-horizontal">
<tr><td>Date:</td><td>Mon Jan  2 15:04:05 UTC 2006</td></tr>
<tr><td>Filename:</td><td>example.c</td></tr>
</table>
</div><div class="pure-u-1 pure-u-md-1-2">
<h2>Coverage</h2>
<table class="pure-table pure-table-horizontal coverage">
<thead><tr><th></th><th>Hits</th><th>Total</th><th>Coverage</th><tr></thead>
<tbody>
<tr><td>Lines:</td><td>9</td><td>10</td><td>90.0%</td></tr>
<tr><td>Functions:</td><td>1</td><td>1</td><td>100.0%</td></tr>
<tr><td>Branches:</td><td>2</td><td>4</td><td>50.0%</td></tr>
</tbody>
</table>
</div></div>
<div class="pure-g"><div class="pure-u">
<h2>File Listing</h2>
<table class="source"><thead>
<tr><th>Line #</th><th>Branches</th><th>Hit count</th><th>Source code</th></tr>
</thead><tbody>
<tr id="L1"<tr><td>1</td><td></td><td></td><td>/*</td></tr>
<tr id="L2"<tr><td>2</td><td></td><td></td><td> *  example.c</td></tr>
<tr id="L3"<tr><td>3</td><td></td><td></td><td> * </td></tr>
<tr id="L4"<tr><td>4</td><td></td><td></td><td> *  Calculate the sum of a given range of integer numbers. The range is</td></tr>
<tr id="L5"<tr><td>5</td><td></td><td></td><td> *  specified by providing two integer numbers as command line argument.</td></tr>
<tr id="L6"<tr><td>6</td><td></td><td></td><td> *  If no arguments are specified, assume the predefined range [0..9].</td></tr>
<tr id="L7"<tr><td>7</td><td></td><td></td><td> *  Abort with an error message if the resulting number is too big to be</td></tr>
<tr id="L8"<tr><td>8</td><td></td><td></td><td> *  stored as int variable.</td></tr>
<tr id="L9"<tr><td>9</td><td></td><td></td><td> *</td></tr>
<tr id="L10"<tr><td>10</td><td></td><td></td><td> *  This program example is similar to the one found in the GCOV documentation.</td></tr>
<tr id="L11"<tr><td>11</td><td></td><td></td><td> *  It is used to demonstrate the HTML output generated by LCOV.</td></tr>
<tr id="L12"<tr><td>12</td><td></td><td></td><td> *</td></tr>
<tr id="L13"<tr><td>13</td><td></td><td></td><td> *  The program is split into 3 modules to better demonstrate the &#39;directory</td></tr>
<tr id="L14"<tr><td>14</td><td></td><td></td><td> *  overview&#39; function. There are also a lot of bloated comments inserted to</td></tr>
<tr id="L15"<tr><td>15</td><td></td><td></td><td> *  artificially increase the source code size so that the &#39;source code</td></tr>
<tr id="L16"<tr><td>16</td><td></td><td></td><td> *  overview&#39; function makes at least a minimum of sense.</td></tr>
<tr id="L17"<tr><td>17</td><td></td><td></td><td> *</td></tr>
<tr id="L18"<tr><td>18</td><td></td><td></td><td> */</td></tr>
<tr id="L19"<tr><td>19</td><td></td><td></td><td></td></tr>
<tr id="L20"<tr><td>20</td><td></td><td></td><td>#include &lt;stdio.h&gt;</td></tr>
<tr id="L21"<tr><td>21</td><td></td><td></td><td>#include &lt;stdlib.h&gt;</td></tr>
<tr id="L22"<tr><td>22</td><td></td><td></td><td>#include &#34;methods.h&#34;</td></tr>
<tr id="L23"<tr><td>23</td><td></td><td></td><td></td></tr>
<tr id="L24"<tr><td>24</td><td></td><td></td><td>static int start = 0;</td></tr>
<tr id="L25"<tr><td>25</td><td></td><td></td><td>static int end = 9;</td></tr>
<tr id="L26"<tr><td>26</td><td></td><td></td><td></td></tr>
<tr id="L27"<tr><td>27</td><td></td><td></td><td></td></tr>
<tr id="L28"<tr class="hit"><td>28</td><td></td><td>1</td><td>int main (int argc, char* argv[])</td></tr>
<tr id="L29"<tr><td>29</td><td></td><td></td><td>{</td></tr>
<tr id="L30"<tr><td>30</td><td></td><td></td><td>    int total1, total2;</td></tr>
<tr id="L31"<tr><td>31</td><td></td><td></td><td></td></tr>
<tr id="L32"<tr><td>32</td><td></td><td></td><td>    /* Accept a pair of numbers as command line arguments. */</td></tr>
<tr id="L33"<tr><td>33</td><td></td><td></td><td></td></tr>
<tr id="L34"<tr class="hit"><td>34</td><td>[ + - ]</td><td>1</td><td>    if (argc == 3)</td></tr>
<tr id="L35"<tr><td>35</td><td></td><td></td><td>    {</td></tr>
<tr id="L36"<tr class="hit"><td>36</td><td></td><td>1</td><td>        start   = atoi(argv[1]);</td></tr>
<tr id="L37"<tr class="hit"><td>37</td><td></td><td>1</td><td>        end     = atoi(argv[2]);</td></tr>
<tr id="L38"<tr><td>38</td><td></td><td></td><td>    }</td></tr>
<tr id="L39"<tr><td>39</td><td></td><td></td><td></td></tr>
<tr id="L40"<tr><td>40</td><td></td><td></td><td></td></tr>
<tr id="L41"<tr><td>41</td><td></td><td></td><td>    /* Use both methods to calculate the result. */</td></tr>
<tr id="L42"<tr><td>42</td><td></td><td></td><td></td></tr>
<tr id="L43"<tr class="hit"><td>43</td><td></td><td>1</td><td>    total1 = iterate_get_sum (start, end);</td></tr>
<tr id="L44"<tr class="hit"><td>44</td><td></td><td>1</td><td>    total2 = gauss_get_sum (start, end);</td></tr>
<tr id="L45"<tr><td>45</td><td></td><td></td><td></td></tr>
<tr id="L46"<tr><td>46</td><td></td><td></td><td></td></tr>
<tr id="L47"<tr><td>47</td><td></td><td></td><td>    /* Make sure both results are the same. */</td></tr>
<tr id="L48"<tr><td>48</td><td></td><td></td><td></td></tr>
<tr id="L49"<tr class="hit"><td>49</td><td>[ - + ]</td><td>1</td><td>    if (total1 != total2)</td></tr>
<tr id="L50"<tr><td>50</td><td></td><td></td><td>    {</td></tr>
<tr id="L51"<tr class="miss"><td>51</td><td></td><td>0</td><td>        printf (&#34;Failure (%d != %d)!\n&#34;, total1, total2);</td></tr>
<tr id="L52"<tr><td>52</td><td></td><td></td><td>    }</td></tr>
<tr id="L53"<tr><td>53</td><td></td><td></td><td>    else</td></tr>
<tr id="L54"<tr><td>54</td><td></td><td></td><td>    {</td></tr>
<tr id="L55"<tr class="hit"><td>55</td><td></td><td>1</td><td>        printf (&#34;Success, sum[%d..%d] = %d\n&#34;, start, end, total1);</td></tr>
<tr id="L56"<tr><td>56</td><td></td><td></td><td>    }</td></tr>
<tr id="L57"<tr><td>57</td><td></td><td></td><td></td></tr>
<tr id="L58"<tr class="hit"><td>58</td><td></td><td>1</td><td>    return 0;</td></tr>
<tr id="L59"<tr><td>59</td><td></td><td></td><td>}</td></tr>
</tbody></table>
</div></div>
<footer>Generated by <a href="https://gitlab.com/stone.code/scov">SCov</a>.</footer>
</body></html>